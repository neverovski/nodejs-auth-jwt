{
  "openapi": "3.0.1",
  "info": {
    "title": "Auth - OpenAPI 3.0",
    "version": "0.1.8",
    "description": "Node.js Auth SQL",
    "contact": {
      "name": "Dmitry Neverovski",
      "url": "https://code-stuff.com",
      "email": "dmitryneverovski@gmail.com"
    }
  },
  "paths": {
    "/api/auth/forgot-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Forgot password",
        "description": "",
        "requestBody": {
          "$ref": "#/components/requestBodies/ForgotPasswordRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/HttpOk"
          },
          "404": {
            "$ref": "#/components/responses/HttpNotFound"
          },
          "422": {
            "$ref": "#/components/responses/HttpUnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/HttpInternalServerError"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logs user into the system by email and password",
        "description": "",
        "requestBody": {
          "$ref": "#/components/requestBodies/LoginRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenResponse"
          },
          "400": {
            "$ref": "#/components/responses/HttpBadRequest"
          },
          "422": {
            "$ref": "#/components/responses/HttpUnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/HttpInternalServerError"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logs out current logged-in user session",
        "description": "",
        "responses": {
          "204": {
            "$ref": "#/components/responses/HttpNoContent"
          },
          "401": {
            "$ref": "#/components/responses/HttpUnauthorized"
          },
          "500": {
            "$ref": "#/components/responses/HttpInternalServerError"
          }
        },
        "security": [
          {
            "CookieAuth": []
          },
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/auth/platform": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logs user into the system through a platform (apple, google and etc.)",
        "description": "",
        "requestBody": {
          "$ref": "#/components/requestBodies/PlatformRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenResponse"
          },
          "422": {
            "$ref": "#/components/responses/HttpUnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/HttpInternalServerError"
          }
        }
      }
    },
    "/api/auth/refresh-token": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh Token",
        "description": "",
        "requestBody": {
          "$ref": "#/components/requestBodies/RefreshTokenRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenResponse"
          },
          "401": {
            "$ref": "#/components/responses/HttpUnauthorized"
          },
          "422": {
            "$ref": "#/components/responses/HttpUnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/HttpInternalServerError"
          }
        }
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset password",
        "description": "",
        "requestBody": {
          "$ref": "#/components/requestBodies/ResetPasswordRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/HttpOk"
          },
          "422": {
            "$ref": "#/components/responses/HttpUnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/HttpInternalServerError"
          }
        }
      }
    },
    "/api/users/current/change-password": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Change password for a current user",
        "description": "This can only be done by the logged-in user.",
        "requestBody": {
          "$ref": "#/components/requestBodies/ChangePasswordRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/HttpOk"
          },
          "401": {
            "$ref": "#/components/responses/HttpUnauthorized"
          },
          "422": {
            "$ref": "#/components/responses/HttpUnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/HttpInternalServerError"
          }
        },
        "security": [
          {
            "CookieAuth": []
          },
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/users": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a user",
        "description": "",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserCreateRequest"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/HttpOk"
          },
          "422": {
            "$ref": "#/components/responses/HttpUnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/HttpInternalServerError"
          }
        }
      }
    },
    "/api/users/current": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a current user",
        "description": "This can only be done by the logged-in user.",
        "responses": {
          "204": {
            "$ref": "#/components/responses/HttpNoContent"
          },
          "401": {
            "$ref": "#/components/responses/HttpUnauthorized"
          },
          "500": {
            "$ref": "#/components/responses/HttpInternalServerError"
          }
        },
        "security": [
          {
            "CookieAuth": []
          },
          {
            "BearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Return a current user",
        "description": "This can only be done by the logged-in user.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserOneResponse"
          },
          "401": {
            "$ref": "#/components/responses/HttpUnauthorized"
          },
          "500": {
            "$ref": "#/components/responses/HttpInternalServerError"
          }
        },
        "security": [
          {
            "CookieAuth": []
          },
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update a current user",
        "description": "This can only be done by the logged-in user.",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserUpdateRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/HttpOk"
          },
          "401": {
            "$ref": "#/components/responses/HttpUnauthorized"
          },
          "422": {
            "$ref": "#/components/responses/HttpUnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/HttpInternalServerError"
          }
        },
        "security": [
          {
            "CookieAuth": []
          },
          {
            "BearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "parameters": {
      "IdParam": {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "example": 10
        },
        "description": "Numeric ID to get"
      }
    },
    "responses": {
      "TokenResponse": {
        "description": "Successful operation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          }
        }
      },
      "IdResponse": {
        "description": "Successful operation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "number",
                  "example": 1
                }
              }
            }
          }
        }
      },
      "HttpOk": {
        "description": "Successful operation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Ok"
                },
                "status": {
                  "type": "number",
                  "example": 200
                },
                "code": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          }
        }
      },
      "HttpNoContent": {
        "description": "No Content"
      },
      "HttpBadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/InvalidCredentialsError"
                }
              ]
            }
          }
        }
      },
      "HttpUnauthorized": {
        "description": "You are not authorized to view the resource",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TokenNotProviderError"
                },
                {
                  "$ref": "#/components/schemas/TokenExpiredError"
                },
                {
                  "$ref": "#/components/schemas/TokenVerifyError"
                },
                {
                  "$ref": "#/components/schemas/RefreshTokenExpiredError"
                },
                {
                  "$ref": "#/components/schemas/RefreshTokenVerifyError"
                },
                {
                  "$ref": "#/components/schemas/TokenMalformedError"
                }
              ]
            }
          }
        }
      },
      "HttpForbidden": {
        "description": "Accessing the resource you were trying to reach is forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Forbidden"
            }
          }
        }
      },
      "HttpNotFound": {
        "description": "The resource you were trying to reach is not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The resource you were trying to reach is not found"
                },
                "status": {
                  "type": "number",
                  "example": 404
                },
                "code": {
                  "type": "string",
                  "example": "NOT_FOUND"
                }
              }
            }
          }
        }
      },
      "HttpUnprocessableEntity": {
        "description": "Validation Failed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Validation Failed"
                },
                "status": {
                  "type": "number",
                  "example": 422
                },
                "code": {
                  "type": "string",
                  "example": "UNPROCESSABLE_ENTITY"
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "example": "The \"email\" must be a string of format test@test.com, it is test.com"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "HttpInternalServerError": {
        "description": "Application failed to process the request",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ExternalServiceError"
                },
                {
                  "$ref": "#/components/schemas/ServerErrorOccurred"
                },
                {
                  "$ref": "#/components/schemas/DBError"
                }
              ]
            }
          }
        }
      },
      "UserOneResponse": {
        "description": "Successful operation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/FullUser"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "CookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "accessToken"
      },
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "TokenNotProviderError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Token not provided"
          },
          "status": {
            "type": "number",
            "example": 401
          },
          "code": {
            "type": "string",
            "example": "TOKEN_NOT_PROVIDED"
          }
        }
      },
      "TokenExpiredError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Token expired"
          },
          "status": {
            "type": "number",
            "example": 401
          },
          "code": {
            "type": "string",
            "example": "TOKEN_EXPIRED"
          }
        }
      },
      "TokenVerifyError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Token verify error"
          },
          "status": {
            "type": "number",
            "example": 401
          },
          "code": {
            "type": "string",
            "example": "TOKEN_VERIFY"
          }
        }
      },
      "RefreshTokenExpiredError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Refresh token expired"
          },
          "status": {
            "type": "number",
            "example": 401
          },
          "code": {
            "type": "string",
            "example": "REFRESH_TOKEN_EXPIRED"
          }
        }
      },
      "RefreshTokenVerifyError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Refresh token verify error"
          },
          "status": {
            "type": "number",
            "example": 401
          },
          "code": {
            "type": "string",
            "example": "REFRESH_TOKEN_VERIFY"
          }
        }
      },
      "TokenMalformedError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Trying get data from token. Something wrong"
          },
          "status": {
            "type": "number",
            "example": 401
          },
          "code": {
            "type": "string",
            "example": "TOKEN_MALFORMED"
          }
        }
      },
      "Forbidden": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Forbidden"
          },
          "status": {
            "type": "number",
            "example": 403
          },
          "code": {
            "type": "string",
            "example": "FORBIDDEN"
          }
        }
      },
      "InvalidCredentialsError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Invalid credentials"
          },
          "status": {
            "type": "number",
            "example": 400
          },
          "code": {
            "type": "string",
            "example": "INVALID_CREDENTIALS"
          }
        }
      },
      "ExternalServiceError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "External service error"
          },
          "status": {
            "type": "number",
            "example": 500
          },
          "code": {
            "type": "string",
            "example": "EXTERNAL"
          }
        }
      },
      "ServerErrorOccurred": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Application failed to process the request"
          },
          "status": {
            "type": "number",
            "example": 500
          },
          "code": {
            "type": "string",
            "example": "SERVER_ERROR"
          }
        }
      },
      "DBError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "DB error"
          },
          "status": {
            "type": "number",
            "example": 500
          },
          "code": {
            "type": "string",
            "example": "DB_ERROR"
          }
        }
      },
      "Meta": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "format": "int64",
            "example": 20
          },
          "currentPage": {
            "type": "number",
            "format": "int64",
            "example": 1
          },
          "hasNextPage": {
            "type": "boolean",
            "example": true
          },
          "hasPrevPage": {
            "type": "boolean",
            "example": false
          },
          "nextPage": {
            "type": "number",
            "format": "int64",
            "example": 2
          },
          "prevPage": {
            "type": "number",
            "format": "int64",
            "example": 1
          },
          "totalPages": {
            "type": "number",
            "format": "int64",
            "example": 10
          },
          "totalItems": {
            "type": "number",
            "format": "int64",
            "example": 200
          }
        }
      },
      "Token": {
        "type": "object",
        "properties": {
          "tokenType": {
            "type": "string",
            "example": "Bearer"
          },
          "accessToken": {
            "$ref": "#/components/schemas/TokenValue"
          },
          "refreshToken": {
            "$ref": "#/components/schemas/TokenValue"
          }
        }
      },
      "EmailValue": {
        "type": "string",
        "example": "info@ontid.com"
      },
      "PasswordValue": {
        "type": "string",
        "minLength": 6,
        "example": "******"
      },
      "PlatformValue": {
        "type": "string",
        "enum": [
          "facebook",
          "apple",
          "google",
          "github"
        ],
        "example": "facebook"
      },
      "TokenValue": {
        "type": "string",
        "example": "******"
      },
      "Profile": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "maxLength": 100,
            "example": "Dmitry"
          },
          "lastName": {
            "type": "string",
            "maxLength": 100,
            "example": "Neverovski"
          }
        }
      },
      "FullProfile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Profile"
          },
          {
            "type": "object",
            "properties": {
              "fullName": {
                "type": "string",
                "example": "Dmitry Neverovski"
              }
            }
          }
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "email": {
            "$ref": "#/components/schemas/EmailValue"
          },
          "profile": {
            "$ref": "#/components/schemas/Profile"
          }
        }
      },
      "FullUser": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "example": 1
              },
              "createdAt": {
                "type": "string",
                "example": "2022-06-06T11:00:00Z"
              },
              "isConfirmedEmail": {
                "type": "boolean",
                "example": true
              }
            }
          },
          {
            "$ref": "#/components/schemas/User"
          }
        ]
      }
    },
    "requestBodies": {
      "LoginRequest": {
        "description": "Logs user into the system by email and password",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "$ref": "#/components/schemas/EmailValue"
                },
                "password": {
                  "$ref": "#/components/schemas/PasswordValue"
                }
              }
            }
          }
        }
      },
      "ForgotPasswordRequest": {
        "description": "Forgot password",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "$ref": "#/components/schemas/EmailValue"
                }
              }
            }
          }
        }
      },
      "ResetPasswordRequest": {
        "description": "Reset password",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "token",
                "password"
              ],
              "properties": {
                "token": {
                  "$ref": "#/components/schemas/TokenValue"
                },
                "password": {
                  "$ref": "#/components/schemas/PasswordValue"
                }
              }
            }
          }
        }
      },
      "RefreshTokenRequest": {
        "description": "Refresh token",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "refreshToken"
              ],
              "properties": {
                "refreshToken": {
                  "$ref": "#/components/schemas/TokenValue"
                }
              }
            }
          }
        }
      },
      "PlatformRequest": {
        "description": "Logs user into the system through a platform (apple, google and etc.)",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "platform",
                "token"
              ],
              "properties": {
                "platform": {
                  "$ref": "#/components/schemas/PlatformValue"
                },
                "token": {
                  "$ref": "#/components/schemas/TokenValue"
                }
              }
            }
          }
        }
      },
      "ChangePasswordRequest": {
        "description": "Change password for a user",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "newPassword": {
                  "$ref": "#/components/schemas/PasswordValue"
                },
                "oldPassword": {
                  "$ref": "#/components/schemas/PasswordValue"
                }
              }
            }
          }
        }
      },
      "UserUpdateRequest": {
        "description": "Update a user",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "UserCreateRequest": {
        "description": "Create a user",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password",
                "profile"
              ],
              "allOf": [
                {
                  "$ref": "#/components/schemas/User"
                },
                {
                  "type": "object",
                  "properties": {
                    "password": {
                      "$ref": "#/components/schemas/PasswordValue"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Auth",
      "description": "auth"
    },
    {
      "name": "User",
      "description": "user"
    }
  ]
}